
// This is a javascript COPY of the java class !!!!
'use strict';

module.exports = function (OCL) {
  return function getHoseCodesForAtom(rootAtom) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var FULL_HOSE_CODE = 1;
    var HOSE_CODE_CUT_C_SP3_SP3 = 2;
    var _options$minSphereSiz = options.minSphereSize,
        minSphereSize = _options$minSphereSiz === undefined ? 0 : _options$minSphereSiz,
        _options$maxSphereSiz = options.maxSphereSize,
        maxSphereSize = _options$maxSphereSiz === undefined ? 4 : _options$maxSphereSiz,
        _options$kind = options.kind,
        kind = _options$kind === undefined ? FULL_HOSE_CODE : _options$kind;


    var molecule = this.getCompactCopy();

    molecule.setAtomCustomLabel(rootAtom, `${molecule.getAtomLabel(rootAtom)}*`);
    molecule.setAtomicNo(rootAtom, OCL.Molecule.getAtomicNoFromLabel('X'));

    var fragment = new OCL.Molecule();
    var results = [];
    var min = 0;
    var max = 0;
    var atomMask = new Array(molecule.getAllAtoms());
    var atomList = new Array(molecule.getAllAtoms());

    for (var sphere = 0; sphere <= maxSphereSize; sphere++) {
      if (max === 0) {
        atomList[0] = rootAtom;
        atomMask[rootAtom] = true;
        max = 1;
      } else {
        var newMax = max;
        for (var i = min; i < max; i++) {
          var atom = atomList[i];
          for (var j = 0; j < molecule.getConnAtoms(atom); j++) {
            var connAtom = molecule.getConnAtom(atom, j);
            if (!atomMask[connAtom]) {
              switch (kind) {
                case FULL_HOSE_CODE:
                  atomMask[connAtom] = true;
                  atomList[newMax++] = connAtom;
                  break;
                case HOSE_CODE_CUT_C_SP3_SP3:
                  if (!(isCsp3(molecule, atom) && isCsp3(molecule, connAtom))) {
                    atomMask[connAtom] = true;
                    atomList[newMax++] = connAtom;
                  }
                  break;
                default:
                  throw new Error('getHoseCoesForAtom unknown kind');
              }
            }
          }
        }
        min = max;
        max = newMax;
      }
      molecule.copyMoleculeByAtoms(fragment, atomMask, true, null);
      if (sphere >= minSphereSize) {
        results.push(fragment.getCanonizedIDCode(OCL.Molecule.CANONIZER_ENCODE_ATOM_CUSTOM_LABELS));
      }
    }
    return results;
  };

  function isCsp3(molecule, atomID) {
    if (molecule.getAtomicNo(atomID) !== 6) return false;
    if (molecule.getAtomCharge(atomID) !== 0) return false;
    if (molecule.getImplicitHydrogens(atomID) + molecule.getConnAtoms(atomID) !== 4) return false;
    return true;
  }
};