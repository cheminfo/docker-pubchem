#!/usr/bin/env node

const program = require('commander');
const fs = require('fs');
const hl = require('highlight.js');
const kt = require('katex');
const path = require('path');
const md = require('markdown-it')({
    html: true,
    linkify: true,
    highlight: function(str,lang) {
        if (lang && hl.getLanguage(lang)) {
            try {
                return '<pre class="hljs"><code><div>' + hl.highlight(lang, str, true).value + '</div></code></pre>';
            } catch(error) {
            }
        }

        return '<pre class="hljs"><code><div>' + md.utils.escapeHtml(str) + '</div></code></pre>';
    }
});

let _math = function(tex, disp) {
    let res;

    try {
        // don't forget to escape '_','*', and '\' .. after math rendering
        res = kt.renderToString(tex,{throwOnError:false,displayMode:disp}).replace(/([_\*\\])/g, "\\$1");
    } catch(err) {
        res = err;
    }

    return res;
};


let rules = [{
    // substitute '\$' by 'Â¶' temporarily ...
    rex:/\\\$/g,
    tmpl: "\xB6"
}, {
    // display equation $$...$$ equation number
    rex:/(\r?\n|^|>)\s*?\${2}([^$]*?)\${2}\s*?\(([^)$\r\n]*?)\)(?=$|\r?\n|\s)/g,
    tmpl: ($0,$1,$2,$3) => `${$1}<section class="eqno"><eqn>${_math($2,true)}</eqn><span>(${$3})</span></section>\n`
}, {
    // display equation $$...$$
    rex:/(\r?\n|^|>)\s*?\${2}([^$]*?)\${2}(?=$|\r?\n|\s)/g,
    tmpl: ($0,$1,$2) => `${$1}<section><eqn>${_math($2,true)}</eqn></section>\n`
}, {
    // multi-character inline equation $...$
    rex:/(\D|\$|^)\$(\S[^$\r\n]*?\S)\$(?!\d)/g,
    tmpl: ($0,$1,$2) => `${$1}<eq>${_math($2,false)}</eq>`
}, {
    // single-character inline equation $...$
    rex:/(\D|^)\$([^$\r\n\t ]{1})\$(?!\d)/g,
    tmpl: ($0,$1,$2) => `${$1}<eq>${_math($2,false)}</eq>`
}, {
    // reverse temporary substitution ...
    rex:/\xB6/g,
    tmpl: "$"
}];


function toDocument(markdown) {
    // convert latex first
    for (let rule of rules) { // apply rules ...
        markdown = markdown.replace(rule.rex, rule.tmpl);
    }

    // and then render markdown
    return md.render(markdown);
}

function toHtml(markdown, withHtmlHead) {

    let html = `<div class="col-lg-8 markdown-body">${toDocument(markdown)}</div>`;

    if (withHtmlHead === true) {
        html = `<!doctype html><html><head><meta charset='utf-8'>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/2.4.1/github-markdown.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.11.0/styles/default.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/katex.min.css">
<link rel="stylesheet" href="https://gitcdn.xyz/repo/goessner/mdmath/master/css/mdmath.css">
</head><body>
${html}
</body></html>`;

    }

    return html;
}

// process options and args
program.version('1.0.0')
    .usage('[options] <markdown-file ...>')
    .option('-w, --with-html-head', 'wrap generated html file with html tag.')
    .parse(process.argv);

// the rest of the arguments pointing to markdown files.
var markdownFiles = program.args;

if (markdownFiles.length == 0) {
    console.error('error: no markdown file provided!');
    process.exit(1);
}

// convert markdown file into html
markdownFiles.forEach(mdFile => {
    if (!mdFile.endsWith('.md')) {
        console.error(`file ${mdFile} is not a markdown file!`);
        return;
    }

    let htmlFile = mdFile.replace(/\.md$/, '.html');
    console.log(`converting ${mdFile} into ${htmlFile}...`);

    let mdContent = fs.readFileSync(mdFile, 'utf8');
    let htmlContent = toHtml(mdContent, program.withHtmlHead);
    fs.writeFileSync(htmlFile, htmlContent, 'utf8');

    console.log('done.\n');
});

